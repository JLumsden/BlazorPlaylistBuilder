@page "/editspotifylist"
@using ActualPlaylistBuilder.Models
@using ActualPlaylistBuilder.Models.TrackSearch
@using Components.Shared

@inject ISetlistService SetlistService
@inject ISpotifySearchService SpotifySearchService
@inject ISnackbar Snackbar

<MudPaper Elevation="10" Class="ma-4 pa-4">
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        <MudText>Playlist Details</MudText>
        <MudTextField @bind-Value="playlistDetails.name" HelperText="Playlist Name" Class="pa-4" />
        <MudTextField @bind-Value="playlistDetails.description" HelperText="Playlist Description" Class="pa-4" />
        <MudSpacer />
        <MudButton OnClick="SubmitPlaylist" Color="Color.Success">Create Playlist</MudButton>
    </MudStack>
</MudPaper>

@if(!string.IsNullOrEmpty(playlistUri))
{
    <MudText>@playlistUri</MudText>
}

<MudGrid Justify="Justify.FlexStart" Spacing="1">
@for (int i = 0; i < searches.Count(); i++)
{
    int x = i;

    @if (searches[x].Tracks.Items is not null && searches[x].Tracks.Items.Any() && chosenSongs.Any())
    {      <MudItem >
                <SongPicker ChosenSong="@chosenSongs[x]" Items="@searches.ElementAt(x).Tracks.Items" OnChoose="@(s => chosenSongs[x] = s)" />
            </MudItem>
    }  
}
</MudGrid>


@code {
    public List<string> searchTerms { get; set; }
    public List<SongSearch> searches { get; set; } = new();
    public string bloop { get; set; }
    [Inject]
    private ISpotifyAuthService spotifyAuthService { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public PlaylistDetails playlistDetails { get; set; } = new();
    public string playlistUri { get; set; } = string.Empty;
    public List<Item> chosenSongs { get; set; } = new();

    private int selectedIndex = 0;

    protected override async Task OnParametersSetAsync()
    {
        searchTerms = SetlistService.GetSearchList();
        playlistDetails = SetlistService.GetPlaylist();

        foreach(var term in searchTerms)
        {
            await GetTrack(term);
        }
        chosenSongs = DetermineBestChoices();
    }

    private async Task GetTrack(string term)
    {
        SongSearch? tempVal;
        tempVal = await SpotifySearchService.GetTrack(term);
        if (tempVal is not null)
        {
            searches.Add(tempVal);
            StateHasChanged();
        }
    }

    public async Task SubmitPlaylist()
    {
        if (string.IsNullOrEmpty(playlistDetails.name) || string.IsNullOrEmpty(playlistDetails.description))
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Playlist Details must not be blank!", Severity.Error);
        }
        else
        {
            playlistUri = await spotifyAuthService.OrchestratePlaylist(playlistDetails, chosenSongs.Select(u => u.Uri).ToList());
        }
    }

    private List<Item> DetermineBestChoices()
    {
        return searches.Select(x => x.Tracks.Items[0]).ToList();
    }
}
