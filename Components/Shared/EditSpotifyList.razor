@page "/editspotifylist/{setlistId}"
@using ActualPlaylistBuilder.Models
@using ActualPlaylistBuilder.Models.TrackSearch
@using Components.Shared

@inject ISetlistService SetlistService
@inject ISpotifySearchService SpotifySearchService

@* @foreach(var item in searchTerms)
{
    <MudPaper>@item</MudPaper>
} *@
<MudToolBar Fixed="true" Color="Color.Primary" Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
    <MudTextField @bind-Value="playlistDetails.name" HelperText="Playlist Name"/>
    <MudTextField @bind-Value="playlistDetails.description" HelperText="Playlist Description"/>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" Edge="Edge.End" OnClick="SubmitPlaylist"/>
</MudToolBar>

@if(!string.IsNullOrEmpty(playlistUri))
{
    <MudText>@playlistUri</MudText>
}

<MudGrid Justify="Justify.FlexStart" Spacing="1">
@for (int i = 0; i < giggities.Count(); i++)
{
    int x = i;
    
    
    @if (giggities[x].Tracks.Items is not null && giggities[x].Tracks.Items.Any() && chosenSongs.Any())
    {
        
            <MudItem >
                <SongPicker ChosenSong="@chosenSongs[x]" Items="@giggities.ElementAt(x).Tracks.Items" OnChoose="@(s => chosenSongs[x] = s)" />
            </MudItem>
        
        
    }
    
}
</MudGrid>


@code {
    [Parameter]
    public string setlistId { get; set; }
    public List<string> searchTerms { get; set; }
    public List<SongSearch> giggities { get; set; } = new();
    public string bloop { get; set; }
    [Inject]
    private ISpotifyAuthService spotifyAuthService { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public PlaylistDetails playlistDetails { get; set; } = new();
    public string playlistUri { get; set; } = string.Empty;
    public List<Item> chosenSongs { get; set; } = new();

    private int selectedIndex = 0;

    protected override async Task OnParametersSetAsync()
    {
        searchTerms = SetlistService.GetSearchList();
        Console.WriteLine("GetTrack");
        // await GetTrack("Periphery Chvrch Bvrner");
        // await GetTrack("Periphery Reptile");

        

        foreach(var term in searchTerms)
        {
            await GetTrack(term);
        }
        chosenSongs = DetermineBestChoices();
    }

    private async Task GetTrack(string term)
    {
        SongSearch? tempVal;
        tempVal = await SpotifySearchService.GetTrack(term);
        if (tempVal is not null)
        {
            giggities.Add(tempVal);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(term + " failed");
        }
    }

    public async Task SubmitPlaylist()
    {
        playlistUri = await spotifyAuthService.OrchestratePlaylist(playlistDetails, chosenSongs.Select(u => u.Uri).ToList());
    }

    private List<Item> DetermineBestChoices()
    {
        return giggities.Select(x => x.Tracks.Items[0]).ToList();
    }
}
