@page "/editlist"
@using ActualPlaylistBuilder.Models
@using System.Text.Json
@using System.Text.Json.Serialization


@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar
@inject ISpotifyAnonAuthService SpotifyAnonAuthService
@inject ISetlistService SetlistService
@inject NavigationManager NavManager

<MudStack>
    <MudPaper Elevation="10" Class="d-flex justify-center">
        <MudText Class="pa-2">Customize the search terms for the songs in your Spotify playlist.</MudText>
        <MudButton OnClick="OnSubmit" Color="Color.Success">Submit</MudButton>
    </MudPaper>

    <MudTimeline TimelinePosition="TimelinePosition.Left" Class="">
        <MudTimelineItem>
            <ItemDot>
                <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Add" Color="Color.Success" OnClick="(() => AddSong(-1))" />
            </ItemDot>
        </MudTimelineItem>
        @for (int i = 0; i < searchTerms.Count(); i++)
        {
            int x = i;
            <MudTimelineItem>
                <ItemDot>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => DeleteSong(x))" />
                </ItemDot>
                <ItemContent>
                    <MudPaper>
                        <MudTextField @bind-Value="searchTerms[x]" T="string" Label="Search Term" />
                    </MudPaper>
                </ItemContent>
            </MudTimelineItem>
            <MudTimelineItem>
                <ItemDot>
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Add" Color="Color.Success" OnClick="(() => AddSong(x))" />
                </ItemDot>
            </MudTimelineItem>
        }
    </MudTimeline>
    @if (!string.IsNullOrEmpty(message))
    {
        <MudText>@message</MudText>
    }
</MudStack>

@code {
    [SupplyParameterFromQuery]
    public string setlistId { get; set; } = string.Empty;
    private Root? eventData { get; set; }
    private List<string> searchTerms { get; set; } = new();
    [Inject]
    private IConfiguration _configuration { get; set; }
    private string message { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(setlistId))
        {
            Root? tempData = null;

            var request = new HttpRequestMessage(HttpMethod.Get, "https://api.setlist.fm/rest/1.0/setlist/" + setlistId);
            request.Headers.Add("x-api-key", _configuration["setlistfm_key"]);
            request.Headers.Add("Accept", "application/json");

            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                tempData = await JsonSerializer.DeserializeAsync
                    <Root>(responseStream);
            }
            else
            {
                message = "Setlist.FM is currently experiencing server issues!";
            }


            eventData = tempData;

            if (eventData is not null && eventData.sets.set.Any())
            {

                List<string> tempNames = new();
                List<Song> tempSongs = new();
                foreach (var set in eventData.sets.set)
                {
                    tempSongs.AddRange(set.song);
                }
                searchTerms = tempSongs.Select(x => string.Format("{0} {1}", eventData.artist.name, x.name)).ToList();
            }
        }
    }

    public void OnSubmit()
    {
        PlaylistDetails tempPlaylist;

        if (eventData is not null && eventData.artist is not null && eventData.tour is not null && !string.IsNullOrEmpty(eventData.artist.name) && !string.IsNullOrEmpty(eventData.tour.name))
        {
            tempPlaylist = new PlaylistDetails
                {
                    name = $"{eventData.artist.name}'s {eventData.tour.name} Selist",
                    description = $"{eventData.artist.name}'s {eventData.tour.name} Selist."
                };
        }
        else
        {
            tempPlaylist = new PlaylistDetails
                {
                    name = "",
                    description = ""
                };
        }

        SetlistService.SetData(searchTerms, tempPlaylist);
        NavManager.NavigateTo("/editspotifylist");
    }

    public void AddSong(int index)
    {
        searchTerms.Insert(index >= 0 ? index + 1 : 0, string.Empty);
    }

    public void DeleteSong(int index)
    {
        searchTerms.RemoveAt(index);
    }
}
