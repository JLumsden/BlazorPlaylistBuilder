@page "/editlist/{setlistId}"
@using ActualPlaylistBuilder.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using ActualPlaylistBuilder.Services

@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar
@inject ISpotifyAnonService SpotifyAnonService

<MudContainer>
    @if (eventData is not null)
    {   
        <MudTimeline TimelinePosition="TimelinePosition.Left">
            <MudTimelineItem>
                <ItemDot>
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Add" Color="Color.Success" OnClick="(() => AddSong(0))" />
                </ItemDot>
            </MudTimelineItem>
        @for(int i = 0; i < searchTerms.Count(); i++)
            {
                int x = i;
                <MudTimelineItem>
                    <ItemDot>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => DeleteSong(x))"/>
                    </ItemDot>
                    <ItemContent>
                        <MudPaper>
                            <MudTextField Text="@searchTerms[x]" T="string" Label="Search Term" />
                        </MudPaper>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem>
                    <ItemDot>
                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Add" Color="Color.Success" OnClick="(() => AddSong(x))"/>
                    </ItemDot>
                </MudTimelineItem>
            }
        </MudTimeline>
    }
</MudContainer>

@code {
    [Parameter]
    public string setlistId { get; set; } = string.Empty;
    private Root? eventData { get; set; }
    private List<string> searchTerms { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        //string tok = SpotifyAnonService.GetAuthToken().Result ?? string.Empty;
        //Snackbar.Add(tok, Severity.Normal);
        Root? tempData = null;

        var request = new HttpRequestMessage(HttpMethod.Get, "https://api.setlist.fm/rest/1.0/setlist/" + setlistId);
        request.Headers.Add("x-api-key", "RYHtJtNU_uUkmWT7Nr9b4yMIgb_PL9jjnzB3");
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            tempData = await JsonSerializer.DeserializeAsync
                <Root>(responseStream);
        }

        eventData = tempData;

        if (eventData is not null && eventData.sets.set.Any())
        {

            List<string> tempNames = new();
            List<Song> tempSongs = new();
            foreach (var set in eventData.sets.set)
            {
                tempSongs.AddRange(set.song);
            }
            searchTerms = tempSongs.Select(x => string.Format("{0} {1}", eventData.artist.name, x.name)).ToList();
        }

    }

    public void AddSong(int index)
    {
        searchTerms.Insert(index > 0 ? index + 1 : 0, string.Empty);
    }

    public void DeleteSong(int index)
    {
        searchTerms.RemoveAt(index);
    }
}
