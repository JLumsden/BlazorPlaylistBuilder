@using ActualPlaylistBuilder.Models.TrackSearch


<MudCarousel ItemsSource="_items" TData="Item[]" ShowArrows="true" ShowBullets="true" AutoCycle="false" Style="height:550px;">
    <ItemTemplate>
        <MudGrid Justify="Justify.SpaceEvenly" Spacing="1">
            @foreach (var song in context)
            {
                <MudItem>
                    <SongCard Song="song" OnChoose="Chosen" PlaySong="choosePlayingSong" />
                </MudItem>
            }
        </MudGrid>
    </ItemTemplate>
</MudCarousel>


@code {
    [Parameter]
    public List<Item> Items { get; set; }
    [Parameter] public EventCallback<Item> OnChoose { get; set; }
    [Parameter] public EventCallback<string> PlaySong { get; set; }
    private IEnumerable<Item[]> _items { get; set; }
    const int PAGE_SIZE = 3;

    protected override Task OnParametersSetAsync()
    {
        _items = Items.Chunk(PAGE_SIZE);

        return base.OnParametersSetAsync();
    }

    void Chosen(Item item)
    {
        OnChoose.InvokeAsync(item);
    }
    void choosePlayingSong(string chosenSong)
    {
        PlaySong.InvokeAsync(chosenSong);
    }
}
