@using ActualPlaylistBuilder.Models.TrackSearch

<MudPaper Class="pa-2" Elevation="10">
<div class="d-flex align-center">
    
        <SongCard Song="@ChosenSong" IsSelected="true" ShowEdit="@(b => {showEdit = b;})" />
        @if (showEdit)
        {

        <SongCarousel Items="@Items" OnChoose="@(s => {OnChoose.InvokeAsync(s);})" />

        }
    
</div>
</MudPaper>
    @* <MudExpansionPanels>
    <MudExpansionPanel>
    <TitleContent>

    </TitleContent>
    <ChildContent>
    <SongPicker Items="@track.Tracks.Items" />
    </ChildContent>
    </MudExpansionPanel>
    </MudExpansionPanels> *@


@code {
    [Parameter]
    public List<Item> Items { get; set; }
    [Parameter]
    public Item ChosenSong { get; set; }
    [Parameter] public EventCallback<Item> OnChoose { get; set; }
    private bool showEdit {get; set;} = false;
    private IEnumerable<Item[]> _items { get; set; }
    const int PAGE_SIZE = 5;

    protected override Task OnParametersSetAsync()
    {
        _items = Items.Chunk(PAGE_SIZE);

        return base.OnParametersSetAsync();
    }

    void Chosen(Item item)
    {
        OnChoose.InvokeAsync(item);
    }
}
